apply plugin: 'com.tencent.bugly.tinker-support'

def bakPath = file("${buildDir}/bakApk/")

/**
 * ---------------------------------------------------------
 * 注释：新包只需要修改一下3个参数
 */

/**
 * 1,此处填写每次构建生成的基准包目录
 */
def baseApkDir = "app-0722-15-05-18"
/**
 * 2,版本号
 */
def versionCode = "2.1.8"
/**
 * 3,正常编译false，打布丁是改为true
 */
def isEnable = true
/**
 * ---------------------------------------------------------
 */

tinkerSupport {

    // 开启tinker-support插件，默认值true
    enable = true

    // 指定归档目录，默认值当前module的子目录tinker
    autoBackupApkDir = "${bakPath}"

    // 是否启用覆盖tinkerPatch配置功能，默认值false
    // 开启后tinkerPatch配置不生效，即无需添加tinkerPatch
    overrideTinkerPatchConfiguration = true

    // 编译补丁包时，必需指定基线版本的apk，默认值为空
    // 如果为空，则表示不是进行补丁包的编译
    // @{link tinkerPatch.oldApk }
    baseApk = "${bakPath}/${baseApkDir}/Gank_${versionCode}.apk"

    // 对应tinker插件applyMapping   mapping.txt这个文件只有设置混淆才会产生
    baseApkProguardMapping = "${bakPath}/${baseApkDir}/Gank_${versionCode}-mapping.txt"

    // 对应tinker插件applyResourceMapping
    baseApkResourceMapping = "${bakPath}/${baseApkDir}/Gank_${versionCode}-R.txt"

    // 构建基准包和补丁包都要指定不同的tinkerId，并且必须保证唯一性 "1.0.0-base" "1.0.0-patch"
    if (isEnable) {
        tinkerId = "${versionCode}-patch"
    } else {
        tinkerId = "${versionCode}-base"
    }
    // 构建多渠道补丁时使用
//    buildAllFlavorsDir = "${bakPath}/${baseApkDir}"

    // 是否启用加固模式，默认为false.(tinker-spport 1.0.7起支持）
    // isProtectedApp = true

    // 是否开启反射Application模式
    enableProxyApplication = true

    supportHotplugComponent = true

}

/**
 * 一般来说,我们无需对下面的参数做任何的修改
 * 对于各参数的详细介绍请参考:
 * https://github.com/Tencent/tinker/wiki/Tinker-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97
 */
tinkerPatch {
    //oldApk ="${bakPath}/${appName}/app-release.apk"
    ignoreWarning = false
    useSign = true
    dex {
        dexMode = "jar"
        pattern = ["classes*.dex"]
        loader = []
    }
    lib {
        pattern = ["lib/*/*.so"]
    }

    res {
        pattern = ["res/*", "r/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]
        ignoreChange = []
        largeModSize = 100
    }

    packageConfig {
    }
    sevenZip {
        zipArtifact = "com.tencent.mm:SevenZip:1.1.10"
//        path = "/usr/local/bin/7za"
    }
    buildConfig {
//        keepDexApply = false
//        tinkerId = "2.0.2-base"
//        applyMapping = "${bakPath}/${project.name}/app-release-mapping.txt" //  可选，设置mapping文件，建议保持旧apk的proguard混淆方式
//        applyResourceMapping = "${bakPath}/${project.name}/app-release-R.txt" // 可选，设置R.txt文件，通过旧apk文件保持ResId的分配
    }


    List<String> flavors = new ArrayList<>()
    project.android.productFlavors.each { flavor ->
        flavors.add(flavor.name)
    }
    boolean hasFlavors = flavors.size() > 0
/**
 * bak apk and mapping
 */
    android.applicationVariants.all { variant ->
        /**
         * task type, you want to bak
         */
        def taskName = variant.name
        def date = new Date().format("MMdd-HH-mm-ss")

        tasks.all {
            if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {

                it.doLast {
                    copy {
                        hasFlavors = false
                        def fileNamePrefix = "Gank_${variant.versionName}"
                        def newFileNamePrefix = !hasFlavors ? "${fileNamePrefix}" : "${fileNamePrefix}-${date}"

                        def destPath = !hasFlavors ? file("${bakPath}/${project.name}-${date}/${variant.flavorName}") : bakPath

                        from variant.outputs.first().outputFile

                        into destPath
                        rename { String fileName ->
                            fileName.replace("${fileNamePrefix}.apk", "${newFileNamePrefix}.apk")
                        }

                        from "${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("mapping.txt", "${newFileNamePrefix}-mapping.txt")
                        }

                        from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("R.txt", "${newFileNamePrefix}-R.txt")
                        }
                    }
                }
            }
        }
    }
}

