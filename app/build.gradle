apply plugin: 'com.android.application'
apply from: 'tinker-support.gradle'
// 多渠道使用walle示例（注：多渠道使用）
apply from: 'multiple-channel.gradle'

def appLocationId = "com.test.admin.conurbations"
android {
    def packageConfig = appConfigs[appLocationId]
    def _applicationId = appLocationId
//    def _name = packageConfig.name
    def _versionCode = new Date().format("yyyyMMdd").toInteger()
    def _versionName = packageConfig.versionName
    def _keyStore = packageConfig.keyStore
    def _keyStorePass = packageConfig.storePassword
    def _keyAlias = packageConfig.keyAlias
    def _keyAliasPass = packageConfig.keyPassword

    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        applicationId = _applicationId
        versionCode = _versionCode
        versionName = _versionName
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        buildConfigField 'String', 'API_SERVER_URL', '"http://www.jianshu.com/u/9681f3bbb8c2"'
        flavorDimensions "versionCode"

        // 开启multidex
        multiDexEnabled true
    }
    signingConfigs {//签名的配置
        release {
            storeFile file(_keyStore)
            storePassword = _keyStorePass
            keyAlias = _keyAlias
            keyPassword = _keyAliasPass
        }
//        debug {
//            storeFile file(_keyStore)
//            storePassword = _keyStorePass
//            keyAlias = _keyAlias
//            keyPassword = _keyAliasPass
//        }
    }
    buildTypes {
        release {
            minifyEnabled false//是否启动混淆
            zipAlignEnabled true//是否启动zipAlign
            shrinkResources false // 是否移除无用的resource文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release//打包命令行：gradlew assembleRelease
            applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "Gank_${defaultConfig.versionName}_${variant.flavorName}.apk"
                }
            }
            //针对很多渠道
            productFlavors.all { flavor ->
                manifestPlaceholders.put("UMENG_CHANNEL_VALUE", name)
            }
        }
    }

    productFlavors {
        //多渠道打包，命令行打包：gradlew assembleRelease
        def channels = appChannels
        channels.each { name ->
            //生成各个渠道的
            "$name" {
                applicationId="com.tencent.bugly.hotfix.${name}"
            }
        }
    }
    lintOptions {
        //设置编译的lint开关，程序在buid的时候，会执行lint检查，有任何的错误或者警告提示，都会终止构建
        abortOnError false
    }

    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
}


dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile(name: 'jiecaovideoplayer-5.5.4', ext: 'aar')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile rootProject.ext.dependencies["appcompat"]
    compile rootProject.ext.dependencies["design"]
    compile rootProject.ext.dependencies["cardview"]
    compile rootProject.ext.dependencies["gson"]
    compile rootProject.ext.dependencies["fastjson"]
    compile rootProject.ext.dependencies["rfadrx"]
    compile rootProject.ext.dependencies["glide"]
    compile rootProject.ext.dependencies["okhttp"]
    compile rootProject.ext.dependencies["logging"]
    compile rootProject.ext.dependencies["retrofit2"]
    compile rootProject.ext.dependencies["converter"]
    compile rootProject.ext.dependencies["rxrelay"]
    compile rootProject.ext.dependencies["retrofit2-converter"]
    compile rootProject.ext.dependencies["interceptor"]
    compile rootProject.ext.dependencies["glide-okhttp3"]
    compile rootProject.ext.dependencies["davemorrissey"]
    compile rootProject.ext.dependencies["rxjava2"]
    compile rootProject.ext.dependencies["picasso"]
    compile rootProject.ext.dependencies["umeng"]
    compile rootProject.ext.dependencies["whorlview"]
    compile rootProject.ext.dependencies["fresco"]
    compile rootProject.ext.dependencies["contextmenu"]
    compile rootProject.ext.dependencies["con_scalars"]
    compile rootProject.ext.dependencies["photoview"]
    compile rootProject.ext.dependencies["rxandroid2"]
    compile rootProject.ext.dependencies["banner"]
    compile rootProject.ext.dependencies["navigation"]

    compile project(rootProject.ext.dependencies["telellery"])
    compile project(rootProject.ext.dependencies["feedback"])
    compile project(rootProject.ext.dependencies["targetview"])
    compile files(rootProject.ext.dependencies["pinyin4j"])
    testCompile rootProject.ext.dependencies["junit"]

    compile "com.android.support:multidex:1.0.1" // 多dex配置

    //注释掉原有bugly的仓库
    //compile 'com.tencent.bugly:crashreport:latest.release'//其中latest.release指代最新版本号，也可以指定明确的版本号，例如2.3.2
    compile 'com.tencent.bugly:crashreport_upgrade:1.3.4'
//其中latest.release指代最新版本号，也可以指定明确的版本号，例如1.2.0
    compile 'com.tencent.bugly:nativecrashreport:latest.release'
    //其中latest.release指代最新版本号，也可以指定明确的版本号，例如2.2.0
    // walle（多渠道使用）
    compile 'com.meituan.android.walle:library:1.1.3'
}

static def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}